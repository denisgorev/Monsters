{"version":3,"sources":["components/search-box/SearchBox.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","address","city","CardList","monsters","map","key","App","e","setState","searchField","target","value","console","log","state","fetch","response","json","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uWAIaA,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACvC,OAAO,2BAAOC,UAAU,SAASC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,MCFvEI,G,YAAO,SAACC,GACpB,OACC,yBAAKJ,UAAU,kBACd,yBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,4BAAKJ,EAAMG,QAAQE,MACV,2BAAIL,EAAMG,QAAQG,QAAQC,SCJzBC,EAAW,SAACR,GACxB,OACC,yBAAKJ,UAAU,aACbI,EAAMS,SAASC,KAAI,SAACP,GAAD,OACnB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,SCkCrBS,G,wDAjCd,aAAe,IAAD,8BACb,gBAaDjB,aAAe,SAACkB,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,kBAAMC,QAAQC,IAAI,EAAKC,WAbtE,EAAKA,MAAQ,CACZX,SAAU,GACVM,YAAa,IAJD,E,kMASUM,MAAM,8C,cAAvBC,E,gBACaA,EAASC,O,cAAtBA,E,gBACAC,KAAKV,SAAS,CAAEL,SAAUc,I,qIAMvB,IAAD,EAC0BC,KAAKJ,MAA/BX,EADA,EACAA,SAAUM,EADV,EACUA,YACZU,EAAmBhB,EAASiB,QAAO,SAACvB,GAAD,OACxCA,EAAQE,KAAKsB,cAAcC,SAASb,EAAYY,kBAEjD,OACC,yBAAK/B,UAAU,OACd,wCACA,kBAAC,EAAD,CAAWF,YAAa,kBAAmBC,aAAc6B,KAAK7B,eAE9D,kBAAC,EAAD,CAAUc,SAAUgB,S,GA5BNI,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.cac46ea4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n\treturn <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />;\r\n};\r\n","import React from \"react\";\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n\treturn (\r\n\t\t<div className='card-container'>\r\n\t\t\t<img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n\t\t\t<h2>{props.monster.name}</h2>\r\n            <p>{props.monster.address.city}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{props.monsters.map((monster) => (\r\n\t\t\t\t<Card key={monster.id} monster={monster}/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { Component } from \"react\";\n\nimport { SearchBox } from \"./components/search-box/SearchBox\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: \"\",\n\t\t};\n\t}\n\n\tasync componentDidMount() {\n\t\tconst response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n\t\tconst json = await response.json();\n\t\tawait this.setState({ monsters: json });\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value }, () => console.log(this.state));\n\t};\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters</h1>\n\t\t\t\t<SearchBox placeholder={\"search monsters\"} handleChange={this.handleChange} />\n\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}